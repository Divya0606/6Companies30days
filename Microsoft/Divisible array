class Solution {
public:
    int minOperations(vector<int>& nums, vector<int>& numsDivide) {
        priority_queue <int, vector<int>, greater<int> > p;
        unordered_set<int>s;
        for(auto x : numsDivide){
            s.insert(x);
        }
        for(auto x : nums){
            p.push(x);
        }
        int f=0;
        int c =0;
        while(!p.empty()){
            
            int k=p.top();
            
            for(auto x : s){
                if(x%k!=0){
                    p.pop();
                    c++;
                    f=0;
                    break;
                }
                else f = 1;
            }
            if(f==1) return c;
        }
        return -1;
    }
};
